#pragma once 
#include <stdint.h>

#define DEBUG  // Comment this out to disable debug logs

#ifdef DEBUG
    #define RED "\x1b[31m"
    #define GREEN "\x1b[32m"
    #define RESET "\x1b[0m"
    #define ORANGE "\x1b[38;5;214m"
    #define LOG(fmt, ...) printf(GREEN "[+] " RESET fmt "\n", ##__VA_ARGS__)
#else
    #define LOG(fmt, ...)
#endif


/**
 * @brief Callback function triggered when a data frame is received.
 * 
 * @param data Pointer to the received data.
 * @param size Size of the received data frame.
 */
typedef void (*DataCallback)(const void *data, uint64_t size);

/**
 * @brief Callback function triggered when a connection is closed.
 * 
 * @param id Identifier of the closed connection.
 */
typedef void (*CloseCallback)(const char *id);

/**
 * @brief Configuration structure for the Cequiq server.
 */
typedef struct {
    uint16_t port_number; /**< The listen port number. */
    uint64_t max_data_frame_size; /**< Maximum size of a data frame. If exceeded, the connection is terminated. */
    const char *certificate_file_name; /**< Certificate file name. */
    const char *private_key_file_name; /**< Private key file name. */
    const char *server_directory; /**< Path to a directory for storing persistent files required or generated by the server. */
    const char *ssl_cache_id; /**< Unique identifier for the SSL session cache. */
    DataCallback data_callback; /**< Function pointer for handling incoming data frames. */
    CloseCallback close_callback; /**< Function pointer for handling closed connections. */
} CequiqConfig;

/**
 * @brief Creates a new Cequiq configuration instance.
 * 
 * @return Pointer to the newly allocated CequiqConfig structure.
 */
CequiqConfig *Cequiq_init();

/**
 * @brief Starts the Cequiq server with the provided configuration.
 * 
 * @param config Pointer to a CequiqConfig structure.
 * @return -1 on failure.
 */
int cequiq_start(CequiqConfig *config);

/**
 * @brief Retrieves the connection identifier.
 * 
 * @return A dynamically allocated string containing the connection ID. The caller must free the memory.
 */
char *get_connection_id();

/**
 * @brief Writes data to a connection.
 * 
 * @param conn_id The connection ID.
 * @param data Pointer to the data to be written.
 * @param size Size of the data in bytes.
 * @return -1 on failure.
 */
int cequiq_write(const char *conn_id, void *data, uint64_t size);

